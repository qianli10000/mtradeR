% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JMR.R
\name{JMR}
\alias{JMR}
\title{Joint model with Matching and Regularization (JMR)}
\usage{
JMR(
  otu_tab,
  long_design,
  logistic_design,
  outcome,
  long_idset,
  logistic_idset,
  rand.var,
  tune = seq(0.05, 0.15, 0.05),
  cov.taxa = T,
  n.cores = NULL
)
}
\arguments{
\item{otu_tab}{A table of relative abundance with rows as OTUs and columns as samples.}

\item{long_design}{A numeric vector for taxa filters, specified in the order of c(minimum relative abundance, minimum prevalence )}

\item{logistic_design}{A character vector for set and subject identifiers in DataPrep$meta_data, in the order of c(set ID, subject ID)}

\item{outcome}{A character for disease outcome variable in DataPrep$meta_data.}

\item{long_idset}{Name of the covariate representing age (or time point) for each sample.}

\item{logistic_idset}{Names of the covariates in disease sub-model.}

\item{rand.var}{Names of the covariates used in OTU sub-models.}

\item{tune}{The type of trajectory analysis: intercept or slope.}

\item{cov.taxa}{Whether to adjust for covariate taxa.}

\item{n.cores}{Number of workers registered in parallel computing.}
}
\value{
\item{$test.result}{The result of joint test on relative abundance and presence.}
\item{$rho}{Tuning parameter value.}
}
\description{
This function test trajectory (either intercept or slope) association with disease outcome in matched sets.
}
\examples{
data("DM_MLE")

#Generate set indicator and disease outcome
meta_data<-StatSim(n=50)
meta_data<-meta_data[order(meta_data$set,meta_data$id),]
subj_data<-unique(meta_data[,c('id','outcome')])
outcome<-subj_data$outcome
names(outcome)<-subj_data$id
long_design <- model.matrix(~age,meta_data)
logistic<-unique(subset(meta_data,select = -c(age,ageset.id)))
rownames(logistic)=logistic$id
logistic_design <- model.matrix(~genetic,logistic)
long_idset <- meta_data[,c('id','set','order')]
logistic_idset <- logistic[,c('id','set','order')]

#Generate metagenomic raw counts table with dimension P=10 (e.g. at phylum level).
raw.counts=TaxaSim(DM_MLE,StatSim = meta_data,shift_subject = 0,trace =FALSE)
rel.abun=t(t(raw.counts)/colSums(raw.counts))

#Filter taxa by relative abundance and prevalence
mean.rel.abun=rowMeans(rel.abun)
filter=mean.rel.abun>1e-6 & rowSums(rel.abun==0)<0.95*ncol(rel.abun)
input_tab=rel.abun[filter,]

#Run JMR without tuning and covariate taxa on a low-dimension  microbiota. 
JMR.res=JMR(otu_tab = input_tab[1:10,],long_design = long_design,logistic_design = logistic_design,
outcome = outcome, long_idset = long_idset,logistic_idset = logistic_idset,rand.var = '(Intercept)',
tune=0.1,cov.taxa=TRUE,n.cores=2)
}
